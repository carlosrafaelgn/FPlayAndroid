<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-us" dir="ltr">
<head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="author" content="Carlos Rafael Gimenes das Neves" />
<meta name="description" content="FPlay" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="black" />
<meta name="apple-mobile-web-app-title" content="FPlay" />
<link rel="apple-touch-icon" sizes="57x57" href="/favicon.png" />
<link rel="apple-touch-icon" sizes="60x60" href="/favicon.png" />
<link rel="apple-touch-icon" sizes="72x72" href="/favicon.png" />
<link rel="apple-touch-icon" sizes="76x76" href="/favicon.png" />
<link rel="apple-touch-icon" sizes="114x114" href="/favicon.png" />
<link rel="apple-touch-icon" sizes="120x120" href="/favicon.png" />
<link rel="apple-touch-icon" sizes="144x144" href="/favicon.png" />
<link rel="apple-touch-icon" sizes="152x152" href="/favicon.png" />
<link rel="apple-touch-icon" sizes="180x180" href="/favicon.png" />
<link rel="icon" type="image/png" sizes="512x512" href="/favicon512.png" />
<link rel="icon" type="image/png" sizes="192x192" href="/favicon.png" />
<link rel="icon" type="image/png" sizes="96x96" href="/favicon.png" />
<link rel="icon" type="image/png" sizes="48x48" href="/favicon.png" />
<link rel="icon" type="image/png" sizes="32x32" href="/favicon.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicon.png" />
<link rel="Shortcut Icon" href="/favicon.ico" />
<link rel="Shortcut Icon" href="/favicon.png" />
<link rel="manifest" href="/manifest.json" />
<meta name="msapplication-config" content="/browserconfig.xml" />
<meta name="theme-color" content="#283796" />
<title>FPlay</title>
<link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600" rel="stylesheet" type="text/css" />
<link href="/style.css" rel="stylesheet" type="text/css" />
<link rel="icon" type="image/png" href="/favicon.png" />
<link rel="Shortcut Icon" href="/favicon.ico" />
<link rel="Shortcut Icon" href="/favicon.png" />
<style type="text/css">
@font-face {
	font-family: 'FPlayIcons';
	src: url('/icons.ttf') format('truetype');
	font-weight: normal;
	font-style: normal;
}

html {
	height: 100%;
}

body {
	background: #444;
	color: #000;
	height: 100%;
}

h1, h2, h3 {
	font-size: 20px;
}

input, select, button, textarea,
input:focus, select:focus, button:focus, textarea:focus {
	outline: 0 none transparent;
}

main {
	margin: 0;
	padding: 0;
	position: relative;
	height: 100%;
}

h1 {
	height: 48px; /* 8 30 8 2 */
	line-height: 30px;
}

.icon-btn, .icon-btn:hover, .icon-btn:focus, .icon-btn:active {
	outline: 0;
}

.icon-btn {
	background: transparent;
	border-radius: 0;
	border: 0px none transparent;
	line-height: 48px;
	font: 400 32px 'FPlayIcons';
	width: 48px;
	height: 48px;
	text-align: center;
	color: #fff;
	margin: 0 8px 0 0;
	text-rendering: optimizeSpeed;
	-webkit-font-smoothing: none;
	-moz-osx-font-smoothing: grayscale;
}

.icon-btn:hover, .icon-btn:focus, .icon-btn:active {
	color: #000;
}

.list {
	background: #bdbdbd;
	margin: 0;
	padding: 0;
	list-style: none;
	overflow-x: hidden;
	overflow-y: auto;
	position: absolute;
	left: 0;
	right: 0;
	top: 48px;
	bottom: 122px;
}

.list-item {
	background: #d9d9d9;
	margin: 4px 4px 0;
	padding: 8px;
	border-width: 0 1px 1px 0;
	border-style: solid;
	border-color: #9e9e9e;
	cursor: pointer;
	text-align: left;
}

.list-item-length, .list-item-primary, .list-item-secondary, .list-item-index {
	white-space: nowrap;
}

.list-item-primary, .list-item-secondary {
	overflow: hidden;
	text-overflow: ellipsis;
}

.list-item-length, .list-item-primary {
	line-height: 30px;
}

.list-item-secondary, .list-item-index {
	line-height: 20px;
}

.list-item-length, .list-item-index {
	float: right;
}

.list-item-primary {
	font-size: 18px;
	margin-bottom: 4px;
}

.list-item-secondary {
	color: #333;
	padding-right: 4px;
}

.list-item-index {
	color: #555;
}

.list-item:hover, .icon-btn:hover, .icon-btn:focus {
	background: #fc6; /*#999eff;*/
}

.list-item:active, .icon-btn:active {
	background: #ffe5b5; /*#e5e6ff;*/
}

.list-item.current, .list-item.current:hover {
	background: #fc6;
}

.list-item.current:active {
	background: #ffe5b5;
}

.icon-btn, .icon-btn:hover, .icon-btn:focus, .icon-btn:active {
	outline: 0;
}

.lbl-time {
	line-height: 48px;
	display: inline-block;
	font-size: 20px;
	height: 48px;
	vertical-align: top;
	position: absolute;
	left: 176px;
	right: 8px;
	text-align: center;
}

.control-row-1 {
	position: relative;
	margin: 28px 14px;
}

footer {
	height: 122px; /* 2 8 48 8 48 8 */
	position: absolute;
	left: 0;
	right: 0;
	bottom: 0;
}

.window {
	background: #444abf;
	color: #fff;
	margin: 0;
	padding: 8px;
}

.color-icon {
	color: #fb3;
}

.color-highlight {
	color: #fc6;
}

.color-window {
	color: #fff;
}

.border-top, .border-bottom {
	border-color: #fc6;
}

.border-top {
	border-top-style: solid;
	border-top-width: 2px;
}

.border-bottom {
	border-bottom-style: solid;
	border-bottom-width: 2px;
}

@media (min-width: 550px) {
	main {
		width: 550px;
		margin: 0 auto;
	}
}
</style>
</head>
<body>
<main>
	<h1 class="window border-bottom color-highlight">
		<marquee id="lblTitle"></marquee>
	</h1>
	<ul class="list" id="ulList"></ul>
	<footer class="window border-top">
		<div class="control-row-1">
			<button type="button" class="icon-btn" onclick="previous()" title="Previous">&lt;</button><button type="button" class="icon-btn" onclick="resume()" id="btnPlay" title="Play">P</button><button type="button" class="icon-btn" onclick="pause()" id="btnPause" title="Pause" style="display: none">|</button><button type="button" class="icon-btn" onclick="next()" title="Next">&gt;</button>
			<span class="lbl-time" id="lblTime">-</span>
		</div>
	</footer>
</main>
<script type="text/javascript">
//<![CDATA[
"use strict";
window.Notification = {
	div: null,
	span: null,
	btn: null,
	version: 0,
	timeout: 0,
	timeoutVisible: 0,
	timeoutGone: 0,
	lastClass: "",
	isVisible: false,
	wait: function (msg) {
		var div = document.createElement("div");
		div.innerHTML = "<img alt=\"Wait\" src=\"/loading-grey-t.gif\"> " + (msg || "Please, wait...");
		return Notification.show(div, "default", -1);
	},
	success: function (message, important) {
		return Notification.show(message, "success", important ? 5000 : 2500, true);
	},
	error: function (message, important) {
		return Notification.show(message, "danger", important ? 5000 : 2500, true);
	},
	show: function (message, type, timeout, closeable) {
		if (!Notification.div) {
			Notification.div = document.createElement("div");
			Notification.div.setAttribute("role", "alert");
			Notification.div.className = "alert alert-notification";
			Notification.span = document.createElement("span");
			Notification.btn = document.createElement("button");
			Notification.btn.setAttribute("aria-label", "Fechar");
			Notification.btn.innerHTML = "&times;";
			Notification.btn.onclick = Notification.hide;
			Notification.div.appendChild(Notification.span);
			Notification.div.appendChild(Notification.btn);
			document.body.appendChild(Notification.div);
		}

		Notification.isVisible = true;
		Notification.version++;

		var version = Notification.version;

		if (Notification.timeout) {
			clearTimeout(Notification.timeout);
			Notification.timeout = 0;
		}

		if (Notification.timeoutVisible) {
			clearTimeout(Notification.timeoutVisible);
			Notification.timeoutVisible = 0;
		}

		if (Notification.timeoutGone) {
			clearTimeout(Notification.timeoutGone);
			Notification.timeoutGone = 0;
		}

		if (timeout !== -1) {
			if (isNaN(timeout) || timeout <= 0)
				closeable = true;
			else
				Notification.timeout = setTimeout(function () {
					if (Notification.version !== version)
						return;
					Notification.hide();
				}, timeout + 30);
		}

		if (type !== "success" && type !== "info" && type !== "danger" && type !== "warning")
			type = "default";

		Notification.btn.className = (closeable ? "close" : "close hidden");
		Notification.lastClass = "alert alert-notification alert-" + type + (closeable ? " alert-dismissible" : "");
		Notification.div.className = Notification.lastClass;
		Notification.timeoutVisible = setTimeout(function () {
			if (Notification.version !== version)
				return;

			if ((typeof message) === "string") {
				Notification.span.textContent = message;
			} else {
				while (Notification.span.firstChild)
					Notification.span.removeChild(Notification.span.firstChild);
				Notification.span.appendChild(message);
			}

			Notification.div.className = Notification.lastClass + " alert-notification-shown";
		}, 30);
	},
	hide: function () {
		if (!Notification.div || !Notification.isVisible)
			return;

		Notification.isVisible = false;
		Notification.version++;

		var version = Notification.version;

		if (Notification.timeout) {
			clearTimeout(Notification.timeout);
			Notification.timeout = 0;
		}

		if (Notification.timeoutVisible) {
			clearTimeout(Notification.timeoutVisible);
			Notification.timeoutVisible = 0;
		}

		if (Notification.timeoutGone) {
			clearTimeout(Notification.timeoutGone);
			Notification.timeoutGone = 0;
		}

		Notification.div.className = Notification.lastClass;
		Notification.timeoutGone = setTimeout(function () {
			if (Notification.version !== version)
				return;
			Notification.div.className = Notification.lastClass + " alert-notification-gone";
		}, 600);
	}
};

var lblTitle = document.getElementById("lblTitle"),
	ulList = document.getElementById("ulList"),
	btnPlay = document.getElementById("btnPlay"),
	btnPause = document.getElementById("btnPause"),
	lblTime = document.getElementById("lblTime"),
	list = [],
	current = -1,
	loaded = false,
	loading = false,
	paused = true,
	timerId = null,
	audioPlayer = new Audio(),
	happy = "\uD83D\uDE04",
	sad = "\uD83D\uDE22",
	msgNothingPlaying = "Nothing Playing",
	msgLoading = "Loading...",
	msgPlaybackError = "A playback error has occurred " + sad,
	msgNetworkError = "A network error has occurred " + sad,
	msgInvalidList = "The playlist had an invalid format " + sad;

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play_event
// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause_event
audioPlayer.autoplay = true;
audioPlayer.volume = 1;
audioPlayer.onended = function () {
	play(current + 1);
};
audioPlayer.onerror = function () {
	stop();
	Notification.error(msgPlaybackError);
};
audioPlayer.onplay = function () {
	loaded = true;
	loading = false;
	paused = false;
	timerId = setInterval(updateTime, 250);
	updateUI();
};
audioPlayer.onpause = function () {
	if (!loaded)
		return;
	paused = true;
	updateUI();
	stopUpdatingTime();
};

function stopUpdatingTime(resetLabel) {
	if (timerId === null)
		return;
	clearInterval(timerId);
	timerId = null;
	if (resetLabel)
		lblTime.textContent = "-";
}

function format2(x) {
	return (x < 10 ? "0" + x : x.toString());
}

function updateTime() {
	var t = audioPlayer.currentTime;
	if (t < 0) {
		lblTime.textContent = "-";
		return;
	}
	lblTime.textContent = format2((t / 60) | 0) + ":" + format2((t | 0) % 60);
}

function updateUI() {
	var playVisible = (!loaded || paused);
	lblTitle.textContent = (loading ? msgLoading : ((current < 0 || current >= list.length) ? msgNothingPlaying : (list[current].title || "-")));
	btnPlay.style.display = (playVisible ? "" : "none");
	btnPause.style.display = (playVisible ? "none" : "");
}

function previous() {
	play(current - 1);
}

function next() {
	play(current + 1);
}

function resume() {
	if (loading)
		return;
	if (!loaded) {
		play(current < 0 ? 0 : current);
	} else {
		audioPlayer.play();
		updateUI();
	}
}

function pause() {
	if (!loaded || loading)
		return;
	if (paused) {
		resume();
	} else {
		paused = true;
		audioPlayer.pause();
		updateUI();
		stopUpdatingTime();
	}
}

function stop() {
	loaded = false;
	loading = false;
	paused = true;
	try {
		audioPlayer.pause();
	} catch (ex) {
	}
	updateUI();
	stopUpdatingTime(true);
}

function play(i) {
	stop();
	if (i < 0)
		i = list.length - 1;
	else if (i >= list.length)
		i = 0;
	if (i < 0 || i >= list.length) {
		current = -1;
		return;
	}
	try {
		loading = true;
		if (current >= 0 && current < ulList.childNodes.length)
			ulList.childNodes[current].className = "list-item";
		current = i;
		var listItem = ulList.childNodes[current];
		listItem.className = "list-item current";
		if (listItem.scrollIntoView)
			listItem.scrollIntoView({ block: "nearest" });
		else
			ulList.scrollTop = listItem.offsetTop - 4;
		try {
			audioPlayer.pause();
		} catch (ex) {
		}
		lblTitle.textContent = msgLoading;
		audioPlayer.autoplay = true;
		audioPlayer.src = list[i].path;
		audioPlayer.volume = 1;
		updateUI();
	} catch (ex) {
		stop();
		Notification.error(ex.message || ex.toString());
	}
}

function listItem_click() {
	var i = parseInt(this.getAttribute("data-idx"));
	if (isNaN(i) || i < 0 || i >= list.length)
		return;
	play(i);
}

function loadList() {
	var xhr = new XMLHttpRequest(), done = false;
	try {
		Notification.wait();
		xhr.open("GET", "/list.json", true);
		xhr.onreadystatechange = function () {
			if (done || xhr.readyState !== 4)
				return;
			done = true;
			if (xhr.status !== 200) {
				Notification.error(msgNetworkError, true);
			} else {
				try {
					list = JSON.parse(xhr.responseText);
					list = list.list;
					if (!list)
						list = [];
					Notification.hide();
				} catch (ex) {
					list = [];
					Notification.error(msgInvalidList, true);
				}
				while (ulList.firstChild)
					ulList.removeChild(ulList.firstChild);
				var i, listItem, txt;
				for (i = 0; i < list.length; i++) {
					listItem = document.createElement("li");
					listItem.className = "list-item";
					listItem.setAttribute("data-idx", i);
					listItem.onclick = listItem_click;
					txt = document.createElement("span");
					txt.className = "list-item-length";
					txt.textContent = (list[i].length || "-");
					listItem.appendChild(txt);
					txt = document.createElement("div");
					txt.className = "list-item-primary";
					txt.textContent = (list[i].title || "-");
					listItem.appendChild(txt);
					txt = document.createElement("span");
					txt.className = "list-item-index";
					txt.textContent = (i + 1) + " / " + list.length;
					listItem.appendChild(txt);
					txt = document.createElement("div");
					txt.className = "list-item-secondary";
					txt.textContent = (list[i].artist || "-");
					listItem.appendChild(txt);
					ulList.appendChild(listItem);
				}
			}
		};
		xhr.send();
	} catch (ex) {
		Notification.error(ex.message || ex.toString(), true);
	}
}

updateUI();
loadList();
//]]>
</script>
</body>
</html>
